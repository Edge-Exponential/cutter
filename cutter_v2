import RPi.GPIO as GPIO
import time
import threading
from tkinter import *
import tkinter.font as font

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(4, GPIO.OUT)  # power to linear actuator
GPIO.setup(21, GPIO.OUT)  # Direction to linear actuator
GPIO.setup(13, GPIO.OUT)  # Pulse pin motor 1
GPIO.setup(26, GPIO.OUT)  # Direction pin motor 1
GPIO.setup(19, GPIO.OUT)  # Pulse pin motor 2
GPIO.setup(20, GPIO.OUT)  # Direction pin motor 2

motor_time_sleep = [0.001, 0.0012]

GPIO.output(4, GPIO.HIGH)  # relay initiation
GPIO.output(21, GPIO.HIGH)  # relay initiation

# Some global variables for processes
shutdown = True  # Determines if machine is shutdown

# screen setup
window = Tk()
stopFont = font.Font(family='Helvetica', size=100, weight='bold')
font = font.Font(family='Helvetica', size=24, weight='normal')
window.overrideredirect(1)
window.geometry('800x480')


# screen Functions
def killscreen():
    window.destroy()


# Cut functions

def cut():
    print(shutdown)
    if not shutdown:
        GPIO.output(4, GPIO.LOW)
        GPIO.output(21, GPIO.LOW)
        time.sleep(.20)  # .18
        GPIO.output(21, GPIO.HIGH)
        time.sleep(.21)
        GPIO.output(4, GPIO.HIGH)


def clean():
    GPIO.output(4, GPIO.LOW)
    GPIO.output(21, GPIO.LOW)
    time.sleep(.5)
    GPIO.output(21, GPIO.HIGH)
    time.sleep(.5)
    GPIO.output(4, GPIO.HIGH)


def do_cut(size):
    global shutdown
    shutdown = False
    print("CUT START")

    stop_button.pack(expand=True)
    window.update()

    cut_thread = threading.Thread(target=sizecut, args=(size,))
    cut_thread.start()


def emergency_stop():
    print("STOP")
    global shutdown
    shutdown = True
    stop_button.pack_forget()


motor_nums = {'1': [13, 26], '2': [20, 19]}


def motorNum(num, steps):
    x = 0
    global shutdown
    print(shutdown)
    if not shutdown:
        if steps < 0:
            GPIO.output(motor_nums[num][0], GPIO.LOW)
            steps = -1 * steps

        else:
            GPIO.output(motor_nums[num][0], GPIO.HIGH)

        while (x < steps) & (not shutdown):
            GPIO.output(motor_nums[num][1], GPIO.LOW)
            time.sleep(motor_time_sleep[1])
            GPIO.output(motor_nums[num][1], GPIO.HIGH)
            time.sleep(motor_time_sleep[1])
            x += 1


size_nums = {'small': [250, 95, 110, 400, 150, 375],
             'med': [170, 95, 150, 400, 200, 300],
             'large': [150, 105, 180, 400, 220, 360]}


# Takes size as input and does smallcut, medcut, or largecut
def sizecut(size):
    global shutdown
    if not shutdown:
        motorNum('2',size_nums[size][0])
        cut()
        times = 4 if size == 'small' else 5
        for i in range(times):
            motorNum('2', size_nums[size][1])
            cut()
        move1 = threading.Thread(target=motorNum, args=('2',-size_nums[size][2],))
        move1.start()
        motorNum('1',-size_nums[size][3])
        move1.join()
        cut()
        motorNum('2',-size_nums[size][4])
        cut()
        move1 = threading.Thread(target=motorNum, args=('2',-size_nums[size][5]))
        move1.start()
        motorNum('1',size_nums[size][3])
        move1.join()
    shutdown = True
    stop_button.pack_forget()
    print("CUT END")


def do_pie_cut(size):
    global shutdown
    shutdown = False
    print("CUT START")

    stop_button.pack(expand=True)
    window.update()

    cut_thread = threading.Thread(target=piecut)
    cut_thread.start()


def piecut():
    global shutdown
    if not shutdown:
        move1 = threading.Thread(target=motorNum, args=('2',400,))
        move1.start()
        motorNum('1', 400)
        move1.join()
        cut()
        motorNum('1', -200)
        cut()
        motorNum('1', -200)
        cut()
        motorNum('1', -200)
        cut()
        move2 = threading.Thread(target=motorNum, args=('2',-450,))
        move2.start()
        motorNum('1', 200)
        move2.join()
    shutdown = True
    stop_button.pack_forget()
    print("CUT END")


#  ************************************Screen Design***************************************

window.title("Smart Cutter 3.0")
namelabel = Label(window, text="Smart Cutter 3.0", font=font)
namelabel.place(x=285, y=5)

longtext = """
14\"
Half & Half
"""
text14 = Button(window, text="14\"", font=font, bg="black", fg="white", command=lambda: [do_cut('large')], height=5, width=8)
text14.place(x=5, y=60)

text14hh = Button(window, text=longtext, font=font, bg="black", fg="white", command=lambda: [do_cut('large')], height=5, width=8)
text14hh.place(x=5, y=255)

text12 = Button(window, text="12\"", font=font, bg="black", fg="white", command=lambda: [do_cut('med')], height=5, width=8)
text12.place(x=309, y=60)

text10 = Button(window, text="10\"", font=font, bg="black", fg="white", command=lambda: [do_cut('small')], height=5, width=8)
text10.place(x=309, y=255)

text07 = Button(window, text="7\"", font=font, bg="black", fg="white", command=lambda: [do_cut('large')], height=5, width=8)
text07.place(x=623, y=60)

textpiecut = Button(window, text="Pie Cut", font=font, bg="black", fg="white", command=lambda: [piecut()], height=5, width=8)
textpiecut.place(x=623, y=255)

exitbutton = Button(window, text="EXIT", font=font, bg="red2", fg="white", command=killscreen, height=1, width=7)
exitbutton.place(x=639, y=430)

stop_button = Button(window, text="STOP", font=stopFont, bg="red", activebackground="red", fg="white", activeforeground="white", command=emergency_stop, width=100, height=100)
stop_button.pack(expand=True)
stop_button.pack_forget()

window.mainloop()
